import * as Lexer from './lexer';
export declare function enumeration(value: Array<number>, index: number): Lexer.Token;
export declare function enumValue(value: Array<number>, index: number): Lexer.Token;
export declare function singleEnumValue(value: Array<number>, index: number): Lexer.Token;
export declare function enumMemberValue(value: Array<number>, index: number): Lexer.Token;
export declare function singleQualifiedTypeName(value: Array<number>, index: number): Lexer.Token;
export declare function qualifiedTypeName(value: Array<number>, index: number): Lexer.Token;
export declare function qualifiedEntityTypeName(value: Array<number>, index: number): Lexer.Token;
export declare function qualifiedComplexTypeName(value: Array<number>, index: number): Lexer.Token;
export declare function qualifiedTypeDefinitionName(value: Array<number>, index: number): Lexer.Token;
export declare function qualifiedEnumTypeName(value: Array<number>, index: number): Lexer.Token;
export declare function namespace(value: Array<number>, index: number): number;
export declare function odataIdentifier(value: Array<number>, index: number, tokenType?: Lexer.TokenType): Lexer.Token;
export declare function namespacePart(value: Array<number>, index: number): Lexer.Token;
export declare function entitySetName(value: Array<number>, index: number): Lexer.Token;
export declare function singletonEntity(value: Array<number>, index: number): Lexer.Token;
export declare function entityTypeName(value: Array<number>, index: number): Lexer.Token;
export declare function complexTypeName(value: Array<number>, index: number): Lexer.Token;
export declare function typeDefinitionName(value: Array<number>, index: number): Lexer.Token;
export declare function enumerationTypeName(value: Array<number>, index: number): Lexer.Token;
export declare function enumerationMember(value: Array<number>, index: number): Lexer.Token;
export declare function termName(value: Array<number>, index: number): Lexer.Token;
export declare function primitiveTypeName(value: Array<number>, index: number): Lexer.Token;
export declare function primitiveProperty(value: Array<number>, index: number): Lexer.Token;
export declare function primitiveKeyProperty(value: Array<number>, index: number): Lexer.Token;
export declare function primitiveNonKeyProperty(value: Array<number>, index: number): Lexer.Token;
export declare function primitiveColProperty(value: Array<number>, index: number): Lexer.Token;
export declare function complexProperty(value: Array<number>, index: number): Lexer.Token;
export declare function complexColProperty(value: Array<number>, index: number): Lexer.Token;
export declare function streamProperty(value: Array<number>, index: number): Lexer.Token;
export declare function navigationProperty(value: Array<number>, index: number): Lexer.Token;
export declare function entityNavigationProperty(value: Array<number>, index: number): Lexer.Token;
export declare function entityColNavigationProperty(value: Array<number>, index: number): Lexer.Token;
export declare function action(value: Array<number>, index: number): Lexer.Token;
export declare function actionImport(value: Array<number>, index: number): Lexer.Token;
export declare function odataFunction(value: Array<number>, index: number): Lexer.Token;
export declare function entityFunction(value: Array<number>, index: number): Lexer.Token;
export declare function entityColFunction(value: Array<number>, index: number): Lexer.Token;
export declare function complexFunction(value: Array<number>, index: number): Lexer.Token;
export declare function complexColFunction(value: Array<number>, index: number): Lexer.Token;
export declare function primitiveFunction(value: Array<number>, index: number): Lexer.Token;
export declare function primitiveColFunction(value: Array<number>, index: number): Lexer.Token;
export declare function entityFunctionImport(value: Array<number>, index: number): Lexer.Token;
export declare function entityColFunctionImport(value: Array<number>, index: number): Lexer.Token;
export declare function complexFunctionImport(value: Array<number>, index: number): Lexer.Token;
export declare function complexColFunctionImport(value: Array<number>, index: number): Lexer.Token;
export declare function primitiveFunctionImport(value: Array<number>, index: number): Lexer.Token;
export declare function primitiveColFunctionImport(value: Array<number>, index: number): Lexer.Token;
