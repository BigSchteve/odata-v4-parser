var PrimitiveLiteral = require('./primitiveLiteral');
var Expressions = require('./expressions');
var Query = require('./query');
var ResourcePath = require('./resourcePath');
var ODataUri = require('./odataUri');
var parserFactory = function (fn) {
    return function (source, options) {
        var raw = new Uint8Array(source.length);
        var pos = 0;
        var tokens = [];
        for (var i = 0; i < source.length; i++) {
            raw[i] = source.charCodeAt(i);
        }
        while (pos < raw.length) {
            var token = fn(raw, pos);
            if (token) {
                pos = token.next;
                tokens.push(token);
            }
            else {
                throw new Error('Fail at ' + pos);
            }
        }
        return tokens.length > 1 ? tokens : tokens[0];
    };
};
var Parser = (function () {
    function Parser() {
    }
    Parser.prototype.odataUri = function (source, options) { return parserFactory(ODataUri.odataUri)(source, options); };
    Parser.prototype.resourcePath = function (source, options) { return parserFactory(ResourcePath.resourcePath)(source, options); };
    Parser.prototype.query = function (source, options) { return parserFactory(Query.queryOptions)(source, options); };
    Parser.prototype.filter = function (source, options) { return parserFactory(Expressions.boolCommonExpr)(source, options); };
    Parser.prototype.keys = function (source, options) { return parserFactory(Expressions.keyPredicate)(source, options); };
    Parser.prototype.literal = function (source, options) { return parserFactory(PrimitiveLiteral.primitiveLiteral)(source, options); };
    return Parser;
})();
exports.Parser = Parser;
function odataUri(source, options) { return parserFactory(ODataUri.odataUri)(source, options); }
exports.odataUri = odataUri;
function resourcePath(source, options) { return parserFactory(ResourcePath.resourcePath)(source, options); }
exports.resourcePath = resourcePath;
function query(source, options) { return parserFactory(Query.queryOptions)(source, options); }
exports.query = query;
function filter(source, options) { return parserFactory(Expressions.boolCommonExpr)(source, options); }
exports.filter = filter;
function keys(source, options) { return parserFactory(Expressions.keyPredicate)(source, options); }
exports.keys = keys;
function literal(source, options) { return parserFactory(PrimitiveLiteral.primitiveLiteral)(source, options); }
exports.literal = literal;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhcnNlci50cyJdLCJuYW1lcyI6WyJQYXJzZXIiLCJQYXJzZXIuY29uc3RydWN0b3IiLCJQYXJzZXIub2RhdGFVcmkiLCJQYXJzZXIucmVzb3VyY2VQYXRoIiwiUGFyc2VyLnF1ZXJ5IiwiUGFyc2VyLmZpbHRlciIsIlBhcnNlci5rZXlzIiwiUGFyc2VyLmxpdGVyYWwiLCJvZGF0YVVyaSIsInJlc291cmNlUGF0aCIsInF1ZXJ5IiwiZmlsdGVyIiwia2V5cyIsImxpdGVyYWwiXSwibWFwcGluZ3MiOiJBQUVBLElBQVksZ0JBQWdCLFdBQU0sb0JBQW9CLENBQUMsQ0FBQTtBQUN2RCxJQUFZLFdBQVcsV0FBTSxlQUFlLENBQUMsQ0FBQTtBQUM3QyxJQUFZLEtBQUssV0FBTSxTQUFTLENBQUMsQ0FBQTtBQUNqQyxJQUFZLFlBQVksV0FBTSxnQkFBZ0IsQ0FBQyxDQUFBO0FBQy9DLElBQVksUUFBUSxXQUFNLFlBQVksQ0FBQyxDQUFBO0FBRXZDLElBQUksYUFBYSxHQUFHLFVBQVMsRUFBRTtJQUM5QixNQUFNLENBQUMsVUFBVSxNQUFNLEVBQUUsT0FBTztRQUMvQixJQUFJLEdBQUcsR0FBRyxJQUFJLFVBQVUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDeEMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQ1osSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBQ2hCLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDeEMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDL0IsQ0FBQztRQUNELE9BQU8sR0FBRyxHQUFHLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUN6QixJQUFJLEtBQUssR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQ3pCLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQ1gsR0FBRyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUM7Z0JBQ2pCLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDcEIsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNQLE1BQU0sSUFBSSxLQUFLLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQyxDQUFDO1lBQ25DLENBQUM7UUFDRixDQUFDO1FBQ0QsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDL0MsQ0FBQyxDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBRUY7SUFBQUE7SUFPQUMsQ0FBQ0E7SUFOQUQseUJBQVFBLEdBQVJBLFVBQVNBLE1BQWFBLEVBQUVBLE9BQVlBLElBQWdCRSxNQUFNQSxDQUFDQSxhQUFhQSxDQUFDQSxRQUFRQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQSxNQUFNQSxFQUFFQSxPQUFPQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtJQUMvR0YsNkJBQVlBLEdBQVpBLFVBQWFBLE1BQWFBLEVBQUVBLE9BQVlBLElBQWdCRyxNQUFNQSxDQUFDQSxhQUFhQSxDQUFDQSxZQUFZQSxDQUFDQSxZQUFZQSxDQUFDQSxDQUFDQSxNQUFNQSxFQUFFQSxPQUFPQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtJQUMzSEgsc0JBQUtBLEdBQUxBLFVBQU1BLE1BQWFBLEVBQUVBLE9BQVlBLElBQWdCSSxNQUFNQSxDQUFDQSxhQUFhQSxDQUFDQSxLQUFLQSxDQUFDQSxZQUFZQSxDQUFDQSxDQUFDQSxNQUFNQSxFQUFFQSxPQUFPQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtJQUM3R0osdUJBQU1BLEdBQU5BLFVBQU9BLE1BQWFBLEVBQUVBLE9BQVlBLElBQWdCSyxNQUFNQSxDQUFDQSxhQUFhQSxDQUFDQSxXQUFXQSxDQUFDQSxjQUFjQSxDQUFDQSxDQUFDQSxNQUFNQSxFQUFFQSxPQUFPQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtJQUN0SEwscUJBQUlBLEdBQUpBLFVBQUtBLE1BQWFBLEVBQUVBLE9BQVlBLElBQWdCTSxNQUFNQSxDQUFDQSxhQUFhQSxDQUFDQSxXQUFXQSxDQUFDQSxZQUFZQSxDQUFDQSxDQUFDQSxNQUFNQSxFQUFFQSxPQUFPQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtJQUNsSE4sd0JBQU9BLEdBQVBBLFVBQVFBLE1BQWFBLEVBQUVBLE9BQVlBLElBQWdCTyxNQUFNQSxDQUFDQSxhQUFhQSxDQUFDQSxnQkFBZ0JBLENBQUNBLGdCQUFnQkEsQ0FBQ0EsQ0FBQ0EsTUFBTUEsRUFBRUEsT0FBT0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7SUFDL0hQLGFBQUNBO0FBQURBLENBUEEsQUFPQ0EsSUFBQTtBQVBZLGNBQU0sU0FPbEIsQ0FBQTtBQUVELGtCQUF5QixNQUFhLEVBQUUsT0FBWSxJQUFnQlEsTUFBTUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0EsTUFBTUEsRUFBRUEsT0FBT0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7QUFBL0csZ0JBQVEsV0FBdUcsQ0FBQTtBQUMvSCxzQkFBNkIsTUFBYSxFQUFFLE9BQVksSUFBZ0JDLE1BQU1BLENBQUNBLGFBQWFBLENBQUNBLFlBQVlBLENBQUNBLFlBQVlBLENBQUNBLENBQUNBLE1BQU1BLEVBQUVBLE9BQU9BLENBQUNBLENBQUNBLENBQUNBLENBQUNBO0FBQTNILG9CQUFZLGVBQStHLENBQUE7QUFDM0ksZUFBc0IsTUFBYSxFQUFFLE9BQVksSUFBZ0JDLE1BQU1BLENBQUNBLGFBQWFBLENBQUNBLEtBQUtBLENBQUNBLFlBQVlBLENBQUNBLENBQUNBLE1BQU1BLEVBQUVBLE9BQU9BLENBQUNBLENBQUNBLENBQUNBLENBQUNBO0FBQTdHLGFBQUssUUFBd0csQ0FBQTtBQUM3SCxnQkFBdUIsTUFBYSxFQUFFLE9BQVksSUFBZ0JDLE1BQU1BLENBQUNBLGFBQWFBLENBQUNBLFdBQVdBLENBQUNBLGNBQWNBLENBQUNBLENBQUNBLE1BQU1BLEVBQUVBLE9BQU9BLENBQUNBLENBQUNBLENBQUNBLENBQUNBO0FBQXRILGNBQU0sU0FBZ0gsQ0FBQTtBQUN0SSxjQUFxQixNQUFhLEVBQUUsT0FBWSxJQUFnQkMsTUFBTUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsWUFBWUEsQ0FBQ0EsQ0FBQ0EsTUFBTUEsRUFBRUEsT0FBT0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7QUFBbEgsWUFBSSxPQUE4RyxDQUFBO0FBQ2xJLGlCQUF3QixNQUFhLEVBQUUsT0FBWSxJQUFnQkMsTUFBTUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxnQkFBZ0JBLENBQUNBLENBQUNBLE1BQU1BLEVBQUVBLE9BQU9BLENBQUNBLENBQUNBLENBQUNBLENBQUNBO0FBQTlILGVBQU8sVUFBdUgsQ0FBQSIsImZpbGUiOiJwYXJzZXIuanMiLCJzb3VyY2VSb290IjoiLi4vc3JjIn0=
